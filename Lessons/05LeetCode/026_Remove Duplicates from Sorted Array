def remove_duplicates(nums):
    if not nums:
        return 0  # If the array is empty, return 0

    # Initialize pointers
    slow_ptr = 0

    # Iterate through the array
    for fast_ptr in range(1, len(nums)):
        # If the current element is different from the previous one,
        # move the slow pointer forward and update the element
        if nums[fast_ptr] != nums[slow_ptr]:
            slow_ptr += 1
            nums[slow_ptr] = nums[fast_ptr]

    # The length of the modified array is the position of the slow pointer + 1
    return slow_ptr + 1


# Example usage:
nums = [0, 0, 1, 1, 2, 2, 3, 4, 4, 5]
len_bef_rem = len(nums)
print(remove_duplicates(nums), nums)
